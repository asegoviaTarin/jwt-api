/**
 * Load environment variables from ".env" file, this must be called before any
 * "require('config')" to ensure that custom environment variables are loaded.
 */
 require('dotenv').config();

const packageJson = require('../package.json');
const express = require('express');
const cors = require('cors');
const router = require('./api/router');
const config = require('../config/config');
// Set app as a global variable to be able to export it if required as a module
const app = express();
// Set server as a global variable to be able to do a graceful exit
let server;
/**
 * Stops the server from accepting new connections and keeps existing
 * connections allowing zero downtime deployments.
 */
function closeServer() {
  if (!server) {
    return Promise.resolve();
  }
  return new Promise((resolve, reject) => {
    server.close((err) => {
      if (err) {
        reject(err);
        return;
      }
      resolve();
    });
  });
}
// Tries to gracefully close express server and finally terminates the process.
async function close() {
  console.info('Exiting gracefully...');
  try {
    await closeServer();
    console.info('Express server closed successfully');
  } catch (e) {
    console.error('Error closing express server', e);
    process.exitCode = 1;
  }
  console.info('Gracefully exited');
  process.exit();
}
/**
 * SIGINT is generated by the user pressing Ctrl+C and is an interrupt.
 * SIGTERM is a signal that is sent to request the process terminates.
 * The kill command sends a SIGTERM and it's a terminate
 */
process.on('SIGINT', close);
process.on('SIGTERM', close);
async function start() {
  try {
    console.info(`Starting ${packageJson.name}...`);
    console.info(`Version: ${packageJson.version}`);
    // Enable CORS to allow incoming requests from all origins
    app.use(cors());
    /**
     * This is the base router that will send each request to their
     * corresponding version router.
     */
    app.use(router);
    /**
     * If a request reach this middlewares it will be considered as a failed
     * request so it will be logged and the error will be handled and sent to
     * the user.
     */
    //app.use(middlewares.notFoundHandler);
   // app.use(middlewares.errorHandler);
    // Start server
    console.info('Starting express server...');
    const port = config.port;
    server = app.listen(port, () => {
      console.info(`Listening on port ${port}`);
    });
  } catch (e) {
    console.error('Error starting server', e);
    close();
  }
}

start();
